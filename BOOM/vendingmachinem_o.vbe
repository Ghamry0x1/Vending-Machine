-- VHDL data flow description generated from `vendingmachinem_o`
--		date : Thu May 10 09:16:02 2018


-- Entity Declaration

ENTITY vendingmachinem_o IS
  PORT (
  vdd : in BIT;	-- vdd
  vss : in BIT;	-- vss
  clk : in BIT;	-- clk
  input : in bit_vector(2 DOWNTO 0) ;	-- input
  rst : in BIT;	-- rst
  output : out bit_vector(1 DOWNTO 0) ;	-- output
  change : out bit_vector(1 DOWNTO 0) 	-- change
  );
END vendingmachinem_o;


-- Architecture Declaration

ARCHITECTURE behaviour_data_flow OF vendingmachinem_o IS
  SIGNAL statmachine_current_s : REG_VECTOR(3 DOWNTO 0) REGISTER;	-- statmachine_current_s
  SIGNAL aux0 : BIT;		-- aux0
  SIGNAL aux1 : BIT;		-- aux1
  SIGNAL aux2 : BIT;		-- aux2
  SIGNAL aux3 : BIT;		-- aux3
  SIGNAL aux4 : BIT;		-- aux4
  SIGNAL aux5 : BIT;		-- aux5
  SIGNAL aux6 : BIT;		-- aux6
  SIGNAL aux7 : BIT;		-- aux7
  SIGNAL aux8 : BIT;		-- aux8
  SIGNAL aux9 : BIT;		-- aux9
  SIGNAL aux10 : BIT;		-- aux10
  SIGNAL aux11 : BIT;		-- aux11
  SIGNAL aux12 : BIT;		-- aux12
  SIGNAL aux13 : BIT;		-- aux13
  SIGNAL aux14 : BIT;		-- aux14
  SIGNAL aux15 : BIT;		-- aux15
  SIGNAL aux16 : BIT;		-- aux16
  SIGNAL aux17 : BIT;		-- aux17
  SIGNAL aux20 : BIT;		-- aux20
  SIGNAL aux21 : BIT;		-- aux21
  SIGNAL aux22 : BIT;		-- aux22
  SIGNAL aux23 : BIT;		-- aux23
  SIGNAL aux25 : BIT;		-- aux25
  SIGNAL aux26 : BIT;		-- aux26
  SIGNAL aux27 : BIT;		-- aux27
  SIGNAL aux29 : BIT;		-- aux29
  SIGNAL aux32 : BIT;		-- aux32
  SIGNAL aux33 : BIT;		-- aux33
  SIGNAL aux35 : BIT;		-- aux35
  SIGNAL aux36 : BIT;		-- aux36
  SIGNAL aux37 : BIT;		-- aux37

BEGIN
  aux37 <= (statmachine_current_s(3) AND NOT(
statmachine_current_s(1)));
  aux36 <= (statmachine_current_s(3) AND aux26);
  aux35 <= (NOT(statmachine_current_s(3)) AND (NOT(
statmachine_current_s(1)) AND aux33));
  aux33 <= (NOT(rst) AND NOT(statmachine_current_s(2)));
  aux32 <= (aux7 AND (NOT(rst) AND (NOT(
statmachine_current_s(2)) AND NOT(statmachine_current_s(0)))));
  aux29 <= (NOT(rst) AND (NOT(statmachine_current_s(2)) AND 
statmachine_current_s(0)));
  aux27 <= (NOT(statmachine_current_s(1)) AND aux26);
  aux26 <= (NOT(rst) AND statmachine_current_s(2));
  aux25 <= (NOT(rst) AND (statmachine_current_s(2) AND NOT(
statmachine_current_s(0))));
  aux23 <= (NOT(rst) AND statmachine_current_s(0));
  aux22 <= (aux16 OR input(2));
  aux21 <= (NOT(input(1)) AND statmachine_current_s(3));
  aux20 <= ((NOT(aux3) AND input(1)) OR (NOT(aux10) AND NOT(
input(1))));
  aux17 <= (aux16 OR NOT(aux15));
  aux16 <= (input(0) AND input(1));
  aux15 <= NOT(NOT(input(0)) AND NOT(input(1)));
  aux14 <= (input(2) AND input(1));
  aux13 <= NOT(NOT(input(2)) AND NOT(input(1)));
  aux12 <= (aux11 AND NOT(statmachine_current_s(3)));
  aux11 <= (aux10 AND NOT(input(1)));
  aux10 <= (NOT(input(0)) AND input(2));
  aux9 <= (aux8 AND NOT(statmachine_current_s(3)));
  aux8 <= (aux3 AND input(1));
  aux7 <= (statmachine_current_s(3) OR 
statmachine_current_s(1));
  aux6 <= NOT(aux1 AND statmachine_current_s(1));
  aux5 <= (aux1 OR aux4);
  aux4 <= (aux3 AND NOT(input(1)));
  aux3 <= (input(0) AND NOT(input(2)));
  aux2 <= (aux1 AND statmachine_current_s(3));
  aux1 <= (aux0 AND input(1));
  aux0 <= (NOT(input(0)) AND NOT(input(2)));
  label0 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    statmachine_current_s (0) <= GUARDED ((NOT(aux1) AND statmachine_current_s(3) AND 
aux27) OR (aux0 AND aux35) OR (((NOT(aux5) AND 
statmachine_current_s(1)) OR NOT(statmachine_current_s(2))) AND ((aux13 
AND statmachine_current_s(3)) OR aux14 OR (input(0) 
AND NOT(input(1))) OR statmachine_current_s(1)) AND 
aux23) OR (NOT(aux13) AND statmachine_current_s(3) AND
 statmachine_current_s(1) AND aux25));
  END BLOCK label0;
  label1 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    statmachine_current_s (1) <= GUARDED (((NOT(aux0) OR NOT(statmachine_current_s(1)) OR 
NOT(statmachine_current_s(2))) AND ((aux0 AND 
statmachine_current_s(3)) OR statmachine_current_s(1)) AND NOT(aux2) AND 
aux23) OR ((((NOT(aux0) OR input(1) OR NOT(
statmachine_current_s(1))) AND aux36) OR (((aux15 AND NOT(input(2))) OR 
statmachine_current_s(1)) AND aux20 AND NOT(statmachine_current_s(3)) AND
 aux33)) AND NOT(statmachine_current_s(0))));
  END BLOCK label1;
  label2 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    statmachine_current_s (2) <= GUARDED ((((input(1) AND statmachine_current_s(3)) OR NOT
(statmachine_current_s(1))) AND (aux14 OR (NOT(
input(0) XOR input(2)) AND NOT(input(1))) OR (aux17 AND 
statmachine_current_s(3)) OR (NOT(aux17) AND NOT(statmachine_current_s(3)
))) AND aux26) OR ((aux13 OR NOT(
statmachine_current_s(2))) AND (NOT(aux13) OR statmachine_current_s(1)) 
AND (aux13 OR statmachine_current_s(3)) AND aux23) 
OR (((((aux21 AND statmachine_current_s(1)) OR (
input(0) AND aux37)) AND aux26) OR (aux5 AND aux35)) AND 
NOT(statmachine_current_s(0))));
  END BLOCK label2;
  label3 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    statmachine_current_s (3) <= GUARDED ((((((aux22 AND statmachine_current_s(1)) OR (NOT
(aux4) AND aux37)) AND aux26) OR (aux7 AND (aux21 
OR aux22) AND aux33)) AND statmachine_current_s(0))
 OR (((aux6 AND aux36) OR ((
statmachine_current_s(3) OR NOT(statmachine_current_s(1))) AND (NOT(
input(2)) OR statmachine_current_s(3)) AND aux20 AND 
aux33)) AND NOT(statmachine_current_s(0))));
  END BLOCK label3;

change (0) <= ((aux5 AND statmachine_current_s(1) AND aux23) OR
 (aux2 AND aux25));

change (1) <= ((NOT(aux6) AND aux23) OR (aux2 AND aux27));

output (0) <= ((aux9 AND aux27) OR (aux9 AND aux29) OR (aux8 
AND aux32));

output (1) <= ((aux12 AND aux27) OR (aux12 AND aux29) OR (aux11
 AND aux32));
END;
